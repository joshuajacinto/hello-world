{"title":"Deploying a Django App","authors":["Tonino Jankov"],"publisher":"sitepoint","version":1,"chapters":[{"title":"Preface","author":"","block":"k5n38yjl","number":0,"contents":[{"block_type":"element","block":"k5n3972a","search_text":"Deploying A Django App ","text_count":23,"tag_name":"h1","attributes":{"id":"maintitle"},"children":[{"block_type":"text","content":"Deploying A Django App"}]},{"block_type":"element","block":"k5n3972b","search_text":"Copyright © 2020 SitePoint Pty. Ltd.","text_count":36,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Copyright © 2020 SitePoint Pty. Ltd."}]},{"block_type":"element","block":"k5n3972c","search_text":"Author: Tonino Jankov Cover Design: Alex Walker ","text_count":48,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Author:"}]},{"block_type":"text","content":"Tonino Jankov"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Cover Design:"}]},{"block_type":"text","content":"Alex Walker"}]}]},{"block_type":"element","block":"k5n3972d","search_text":"Notice of Rights","text_count":16,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Notice of Rights"}]},{"block_type":"element","block":"k5n3972e","search_text":"All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embodied in critical articles or reviews.","text_count":269,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embodied in critical articles or reviews."}]},{"block_type":"element","block":"k5n3972f","search_text":"Notice of Liability","text_count":19,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Notice of Liability"}]},{"block_type":"element","block":"k5n3972g","search_text":"The author and publisher have made every effort to ensure the accuracy of the information herein. However, the information contained in this book is sold without warranty, either express or implied. Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to be caused either directly or indirectly by the instructions contained in this book, or by the software or hardware products described herein.","text_count":456,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The author and publisher have made every effort to ensure the accuracy of the information herein. However, the information contained in this book is sold without warranty, either express or implied. Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to be caused either directly or indirectly by the instructions contained in this book, or by the software or hardware products described herein."}]},{"block_type":"element","block":"k5n3972h","search_text":"Trademark Notice","text_count":16,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Trademark Notice"}]},{"block_type":"element","block":"k5n3972i","search_text":"Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an editorial fashion and to the benefit of the trademark owner with no intention of infringement of the trademark.","text_count":218,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an editorial fashion and to the benefit of the trademark owner with no intention of infringement of the trademark."}]},{"block_type":"element","block":"k5n3972j","search_text":"Published by SitePoint Pty. Ltd.","text_count":32,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/sitepoint-gray.svg","alt":"SitePoint logo","width":"160","class":"lazyload"},"children":[]},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Published by SitePoint Pty. Ltd."}]},{"block_type":"element","block":"k5n3972k","search_text":"48 Cambridge Street Collingwood VIC Australia 3066 Web: www.sitepoint.com Email: books@sitepoint.com","text_count":100,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"48 Cambridge Street Collingwood"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"VIC Australia 3066"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Web: www.sitepoint.com"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Email: books@sitepoint.com"}]},{"block_type":"element","block":"k5n3972l","search_text":"About SitePoint","text_count":15,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"About SitePoint"}]},{"block_type":"element","block":"k5n3972m","search_text":"SitePoint specializes in publishing fun, practical, and easy-to-understand content for web professionals. Visit sitepoint.com to access our blogs, books, newsletters, articles, and community forums. You'll find a stack of information on JavaScript, PHP, Ruby, mobile development, design, and more.","text_count":297,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"SitePoint specializes in publishing fun, practical, and easy-to-understand content for web professionals. Visit"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.sitepoint.com/"},"children":[{"block_type":"text","content":"sitepoint.com"}]},{"block_type":"text","content":"to access our blogs, books, newsletters, articles, and community forums. You'll find a stack of information on JavaScript, PHP, Ruby, mobile development, design, and more."}]}]},{"title":"Deploying a Django App","author":"Tonino Jankov","block":"k5n38yl3","number":1,"contents":[{"block_type":"element","block":"k5n3972r","search_text":"After we've created a Django app, and we've finished our testing, we'll start thinking about deploying our app to production. There are couple of directions we can take with this, and it will depend on the level of skills and effort we can invest, the cost we're able to outlay, the flexibility we need in putting together our server software stack, and other variables.","text_count":370,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"After we've created a Django app, and we've finished our testing, we'll start thinking about deploying our app to production. There are couple of directions we can take with this, and it will depend on the level of skills and effort we can invest, the cost we're able to outlay, the flexibility we need in putting together our server software stack, and other variables."}]},{"block_type":"element","block":"k5n3972s","search_text":"Different Options","text_count":17,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Different Options"}]},{"block_type":"element","block":"k5n3972t","search_text":"If we don't want to spend a lot, or we aren't ready to put together or maintain the software stack, we can choose to deploy to managed, shared hosting. These days, there are many shared hosts that allow for Python and Django applications-even providing one-click installations and allowing for SSH access.","text_count":305,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If we don't want to spend a lot, or we aren't ready to put together or maintain the software stack, we can choose to deploy to managed, shared hosting. These days, there are many shared hosts that allow for Python and Django applications-even providing one-click installations and allowing for SSH access."}]},{"block_type":"element","block":"k5n3972u","search_text":"Shared Hosting","text_count":14,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Shared Hosting"}]},{"block_type":"element","block":"k5n3972v","search_text":"This may be the quickest and most worry-free solution for many needs, but it doesn't stand out in terms of flexibility. Usually, the server, Python and Django versions, caching solutions and database are predetermined, and we can't change them, meaning that we don't have direct control over our hardware resources. However, for certain applications this will be a budget-effective solution, which may be the primary objective.","text_count":427,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This may be the quickest and most worry-free solution for many needs, but it doesn't stand out in terms of flexibility. Usually, the server, Python and Django versions, caching solutions and database are predetermined, and we can't change them, meaning that we don't have direct control over our hardware resources. However, for certain applications this will be a budget-effective solution, which may be the primary objective."}]},{"block_type":"element","block":"k5n3972w","search_text":"A2 Hosting, SiteGround, and Bluehost are examples of this sort of web host.","text_count":75,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"A2 Hosting, SiteGround, and Bluehost are examples of this sort of web host."}]},{"block_type":"element","block":"k5n3972x","search_text":"VPS and Linux Hosting","text_count":21,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"VPS and Linux Hosting"}]},{"block_type":"element","block":"k5n3972y","search_text":"In recent times, there's been a proliferation of polished, user-friendly, VPS-based hosts like DigitalOcean and Cloudways, who are trying to bridge the skills gap that deploying onto raw Linux servers presents, making it easier and easier to deploy to VPS systems without being an expert.","text_count":288,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In recent times, there's been a proliferation of polished, user-friendly, VPS-based hosts like DigitalOcean and Cloudways, who are trying to bridge the skills gap that deploying onto raw Linux servers presents, making it easier and easier to deploy to VPS systems without being an expert."}]},{"block_type":"element","block":"k5n3972z","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/django-do.png","alt":"","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k5n39730","search_text":"In addition to vendors like Cloudways (which is actually specialized in bootstrapping PHP applications), VPS and cloud vendors provide quick-install interfaces for all sorts of stacks-lower or higher level-that offer developers different levels of flexibility.","text_count":260,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In addition to vendors like Cloudways (which is actually specialized in bootstrapping PHP applications), VPS and cloud vendors provide quick-install interfaces for all sorts of stacks-lower or higher level-that offer developers different levels of flexibility."}]},{"block_type":"element","block":"k5n39731","search_text":"The entry barrier is a lot lower than it was in Django's early years, but managing apps on VPS or dedicated Linux physical servers requires some Linux command-line skills regardless of the one-click solutions that hosting vendors provide. This range of products is commonly referred to as Infrastructure as a Service (IaaS).","text_count":324,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The entry barrier is a lot lower than it was in Django's early years, but managing apps on VPS or dedicated Linux physical servers requires some Linux command-line skills regardless of the one-click solutions that hosting vendors provide. This range of products is commonly referred to as"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Infrastructure as a Service"}]},{"block_type":"text","content":"(IaaS)."}]},{"block_type":"element","block":"k5n39732","search_text":"Platform as a Service","text_count":21,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Platform as a Service"}]},{"block_type":"element","block":"k5n39733","search_text":"For those developers who know what they're doing, and yet don't wish to have to deal with the entire software stack underlying their Django application, there's PaaS.","text_count":166,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"For those developers who know what they're doing, and yet don't wish to have to deal with the entire software stack underlying their Django application, there's PaaS."}]},{"block_type":"element","block":"k5n39734","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/cloud-models.jpg","alt":"","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k5n39735","search_text":"The illustration above shows the difference between three prevalent cloud models, differentiated by how much control is left to the customer and how much of the infrastructure is handled by the vendor. With Platform as a Service (PaaS), every single bit of software infrastructure-on top of the hardware-is handled by the vendor. This usually includes the framework itself-in our case, Django, WSGI (or, as we will discuss, ASGI), server software, database server, middleware, and so on.","text_count":487,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The illustration above shows the difference between three prevalent cloud models, differentiated by how much control is left to the customer and how much of the infrastructure is handled by the vendor. With"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Platform as a Service"}]},{"block_type":"text","content":"(PaaS), every single bit of software infrastructure-on top of the hardware-is handled by the vendor. This usually includes the framework itself-in our case, Django, WSGI (or, as we will discuss, ASGI), server software, database server, middleware, and so on."}]},{"block_type":"element","block":"k5n39736","search_text":"Vendors like Google App Engine, Heroku, and platforms such as Pythonanywhere and Platform.sh usually provide customers with the tooling, conventions and workflow needed to deploy Python web apps to their infrastructure. The customer provides the application logic and the vendor provides the platform.","text_count":301,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Vendors like Google App Engine, Heroku, and platforms such as"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.pythonanywhere.com/"},"children":[{"block_type":"text","content":"Pythonanywhere"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://platform.sh/"},"children":[{"block_type":"text","content":"Platform.sh"}]},{"block_type":"text","content":"usually provide customers with the tooling, conventions and workflow needed to deploy Python web apps to their infrastructure. The customer provides the application logic and the vendor provides the platform."}]},{"block_type":"element","block":"k5n39737","search_text":"Other cloud vendors such as Microsoft Azure and Amazon also provide this model. Each vendor differs in the level of management, tooling and so on they provide to developers, so do your homework before choosing one.","text_count":214,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Other cloud vendors such as Microsoft Azure and Amazon also provide this model. Each vendor differs in the level of management, tooling and so on they provide to developers, so do your homework before choosing one."}]},{"block_type":"element","block":"k5n39738","search_text":"Server Interfaces","text_count":17,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Server Interfaces"}]},{"block_type":"element","block":"k5n39739","search_text":"Web applications essentially respond to different (web) route requests by clients, by outputting some kind of code. Usually it's a combination of static files, HTML markup, CSS, JSON data and other formats. What makes web apps different from mere web pages is their dynamic output.","text_count":281,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Web applications essentially respond to different (web) route requests by clients, by outputting some kind of code. Usually it's a combination of static files, HTML markup, CSS, JSON data and other formats. What makes web apps different from mere web pages is their dynamic output."}]},{"block_type":"element","block":"k5n3973a","search_text":"These applications aren't equipped or optimized to serve web pages in production, to handle the HTTP protocol, to serve static files, to cache content in an optimized way that web servers like NGINX or Apache are.","text_count":213,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"These applications aren't equipped or optimized to serve web pages in production, to handle the HTTP protocol, to serve static files, to cache content in an optimized way that web servers like NGINX or Apache are."}]},{"block_type":"element","block":"k5n3973b","search_text":"That's why we have web server interfaces. If we deal with Python web app deployments in any significant way, we need to know about WSGI, and the newer web server interface ASGI.","text_count":177,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"That's why we have web server interfaces. If we deal with Python web app deployments in any significant way, we need to know about WSGI, and the newer web server interface ASGI."}]},{"block_type":"element","block":"k5n3973c","search_text":"Web Server Gateway Interface","text_count":28,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Web Server Gateway Interface"}]},{"block_type":"element","block":"k5n3973d","search_text":"PEP (or Python Enhanced Proposal) 3333 from 2010 defines the Python Web Server Gateway Interface, an interface specification for communication between python web apps and servers. WSGI applications, compliant to the specification, are stackable, and pass on the requests and responses between the application and the server.","text_count":324,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.python.org/dev/peps/pep-3333/"},"children":[{"block_type":"text","content":"PEP (or Python Enhanced Proposal) 3333"}]},{"block_type":"text","content":"from 2010 defines the Python Web Server Gateway Interface, an interface specification for communication between python web apps and servers. WSGI applications, compliant to the specification, are stackable, and pass on the requests and responses between the application and the server."}]},{"block_type":"element","block":"k5n3973e","search_text":"From Python release 2.5, in 2006, Python implements its own WSGI server.","text_count":72,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"From Python release 2.5, in 2006, Python implements its own WSGI server."}]},{"block_type":"element","block":"k5n3973f","search_text":"The stackable nature of WSGI apps means that apps in the middle must implement both sides of the interface-server and application-and the top and bottom ones need to behave as server and application, respectively. This also means practically unlimited extendibility through middleware.","text_count":285,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The stackable nature of WSGI apps means that apps in the middle must implement both sides of the interface-server and application-and the top and bottom ones need to behave as server and application, respectively. This also means practically unlimited extendibility through middleware."}]},{"block_type":"element","block":"k5n3973g","search_text":"mod_python and mod_wsgi","text_count":23,"tag_name":"h4","attributes":{},"children":[{"block_type":"text","content":"mod_python and mod_wsgi"}]},{"block_type":"element","block":"k5n3973h","search_text":"With Django apps, for years the standard has been Apache server + mod_wsgi . mod_wsgi is an Apache server module first publicly released in 2007, when it replaced another module, mod_python , which worked by embedding a Python interpreter into the Apache server process.","text_count":270,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"With Django apps, for years the standard has been Apache server +"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://modwsgi.readthedocs.io/en/develop/"},"children":[{"block_type":"text","content":"mod_wsgi"}]},{"block_type":"text","content":". mod_wsgi is an Apache server module first publicly released in 2007, when it replaced another module,"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://en.wikipedia.org/wiki/Mod_python"},"children":[{"block_type":"text","content":"mod_python"}]},{"block_type":"text","content":", which worked by embedding a Python interpreter into the Apache server process."}]},{"block_type":"element","block":"k5n3973i","search_text":"Just as mod_python was a successor to CGI interface with Python in terms of efficiency, mod_wsgi succeeded mod_python.","text_count":118,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Just as mod_python was a successor to CGI interface with Python in terms of efficiency, mod_wsgi succeeded mod_python."}]},{"block_type":"element","block":"k5n3973j","search_text":"uWSGI","text_count":5,"tag_name":"h4","attributes":{},"children":[{"block_type":"text","content":"uWSGI"}]},{"block_type":"element","block":"k5n3973k","search_text":"Another implementation of the WSGI standard is uWSGI, an application server compliant with the WSGI standard, which has gained popularity in recent years. It's capable of running as a standalone server, but it's usually deployed behind NGINX as a reverse proxy. As the docs say:","text_count":278,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Another implementation of the WSGI standard is uWSGI, an application server compliant with the WSGI standard, which has gained popularity in recent years. It's capable of running as a standalone server, but it's usually deployed behind NGINX as a reverse proxy. As the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/WebServers.html"},"children":[{"block_type":"text","content":"docs"}]},{"block_type":"text","content":"say:"}]},{"block_type":"element","block":"k5n3973l","search_text":"uWSGI supports several methods of integrating with web servers. It is also capable of serving HTTP requests by itself. ","text_count":119,"tag_name":"blockquote","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"uWSGI supports several methods of integrating with web servers. It is also capable of serving HTTP requests by itself."}]}]},{"block_type":"element","block":"k5n3973m","search_text":"We wrote about deployment flow of a Django app with uWSGI with Mina , which is a capable and minimal deployment tool specialized for Rails apps, along with a screencast .","text_count":170,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.sitepoint.com/how-to-automate-app-deployment-to-alibaba-ecs-with-mina/"},"children":[{"block_type":"text","content":"We wrote"}]},{"block_type":"text","content":"about deployment flow of a Django app with uWSGI with"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/mina-deploy/mina"},"children":[{"block_type":"text","content":"Mina"}]},{"block_type":"text","content":", which is a capable and minimal deployment tool specialized for Rails apps, along with a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.youtube.com/watch?v=bVaHxabFW84"},"children":[{"block_type":"text","content":"screencast"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3973n","search_text":"Another tutorial by the author, describing deployment of a Flask web app on Alibaba Cloud, and which can be used to deploy web apps on any Linux server, can be found here .","text_count":172,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Another tutorial by the author, describing deployment of a Flask web app on Alibaba Cloud, and which can be used to deploy web apps on any Linux server,"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.alibabacloud.com/blog/setting-up-a-flask-application-on-alibaba-cloud-ecs-ubuntu-16-04_594502"},"children":[{"block_type":"text","content":"can be found here"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3973o","search_text":"uWSGI has extensive documentation that covers a wide range of scenarios, from standard cases like deployment of standard Django apps behind NGINX and deployment on Heroku to using WebSockets , and includes discussions about the separation of resources using Linux namespaces versus LXC containers. uWSGI is currently one of the more robust server options for the WSGI stack.","text_count":374,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"uWSGI has extensive documentation that covers a wide range of scenarios, from standard cases like"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html"},"children":[{"block_type":"text","content":"deployment of standard Django apps behind NGINX"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/tutorials/heroku_python.html"},"children":[{"block_type":"text","content":"deployment on Heroku"}]},{"block_type":"text","content":"to using"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/WebSockets.html"},"children":[{"block_type":"text","content":"WebSockets"}]},{"block_type":"text","content":", and includes discussions about the separation of resources using"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/Namespaces.html"},"children":[{"block_type":"text","content":"Linux namespaces"}]},{"block_type":"text","content":"versus LXC containers. uWSGI is currently one of the more robust server options for the WSGI stack."}]},{"block_type":"element","block":"k5n3973p","search_text":"Other WSGI implementations to mention are Gunicorn , a Python web server installable via pip, which also recommends deployment behind a web server like NGINX, werkzeug , CherryPy , gevent-fastcgi and numerous others.","text_count":216,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Other WSGI implementations to mention are"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://gunicorn.org/"},"children":[{"block_type":"text","content":"Gunicorn"}]},{"block_type":"text","content":", a Python web server installable via pip, which also recommends deployment behind a web server like NGINX,"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://werkzeug.palletsprojects.com/en/0.16.x/serving/"},"children":[{"block_type":"text","content":"werkzeug"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"a","attributes":{"href":"http://docs.cherrypy.org/en/latest/advanced.html#wsgi-support"},"children":[{"block_type":"text","content":"CherryPy"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/momyc/gevent-fastcgi"},"children":[{"block_type":"text","content":"gevent-fastcgi"}]},{"block_type":"text","content":"and numerous others."}]},{"block_type":"element","block":"k5n3973q","search_text":"If we deploy a WSGI application and server behind a server like NGINX, our virtual host file will simply proxy the requests to the dynamic part of our app to the WSGI server running on a certain port on localhost, by using the proxy_pass directive:","text_count":248,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If we deploy a WSGI application and server behind a server like NGINX, our virtual host file will simply proxy the requests to the dynamic part of our app to the WSGI server running on a certain port on localhost, by using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"proxy_pass"}]},{"block_type":"text","content":"directive:"}]},{"block_type":"element","block":"k5n3973r","search_text":"server { listen 80; server_name website.xyz; access_log /var/log/nginx/websitexyz.log; location / { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } ","text_count":228,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"server {\n    listen 80;\n    server_name website.xyz;\n    access_log  /var/log/nginx/websitexyz.log;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n  }"}]}]},{"block_type":"element","block":"k5n3973s","search_text":"When we use uWSGI as an application server, according to the docs , we can also pass requests via Unix sockets, using the uwsgi_pass directive:","text_count":143,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"When we use uWSGI as an application server, according to"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html"},"children":[{"block_type":"text","content":"the docs"}]},{"block_type":"text","content":", we can also pass requests via Unix sockets, using the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html"},"children":[{"block_type":"text","content":"uwsgi_pass"}]},{"block_type":"text","content":"directive:"}]},{"block_type":"element","block":"k5n3973t","search_text":"uwsgi_pass unix:///tmp/uwsgi.sock; include uwsgi_params; ","text_count":57,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"uwsgi_pass unix:///tmp/uwsgi.sock;\ninclude uwsgi_params;"}]}]},{"block_type":"element","block":"k5n3973u","search_text":"More information about the WSGI standard can be found here , and the documentation has user guides for a wide range of cases .","text_count":126,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"More information about the WSGI standard can be found"},{"block_type":"element","tag_name":"a","attributes":{"href":"http://wsgi.tutorial.codepoint.net/intro"},"children":[{"block_type":"text","content":"here"}]},{"block_type":"text","content":", and the documentation has"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://modwsgi.readthedocs.io/en/develop/user-guides.html"},"children":[{"block_type":"text","content":"user guides for a wide range of cases"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3973v","search_text":"Asynchronous Web Server Interface","text_count":33,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Asynchronous Web Server Interface"}]},{"block_type":"element","block":"k5n3973w","search_text":"Asynchronous Web Server Interface, or ASGI, is described in its documentation as \"a spiritual successor to WSGI\". It aims to be backward-compatible with WSGI, but to provide support or interface for asynchronous applications and web servers.","text_count":241,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Asynchronous Web Server Interface, or ASGI, is described in"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://asgi.readthedocs.io/en/latest/"},"children":[{"block_type":"text","content":"its documentation"}]},{"block_type":"text","content":"as \"a spiritual successor to WSGI\". It aims to be backward-compatible with WSGI, but to provide support or interface for asynchronous applications and web servers."}]},{"block_type":"element","block":"k5n3973x","search_text":"This interface is meant to provide for long-polling and WebSocket connections.","text_count":78,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This interface is meant to provide for long-polling and WebSocket connections."}]},{"block_type":"element","block":"k5n3973y","search_text":"The asynchronous ASGI server works as an event loop, so a simple application, to borrow from the docs , might look like this:","text_count":125,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The asynchronous ASGI server works as an event loop, so a simple application, to borrow"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://asgi.readthedocs.io/en/latest/introduction.html"},"children":[{"block_type":"text","content":"from the docs"}]},{"block_type":"text","content":", might look like this:"}]},{"block_type":"element","block":"k5n3973z","search_text":"async def application(scope, receive, send): event = await receive() ... await send({\"type\": \"websocket.send\", ...}) ","text_count":117,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"async def application(scope, receive, send):\n    event = await receive()\n    ...\n    await send({\"type\": \"websocket.send\", ...})"}]}]},{"block_type":"element","block":"k5n39740","search_text":"Aside from the async event loop, the ASGI specification also provides for WSGI applications, so that compatibility is maintained.","text_count":129,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Aside from the async event loop, the ASGI specification also provides for WSGI applications, so that compatibility is maintained."}]},{"block_type":"element","block":"k5n39741","search_text":"The project that the entire specification originates from is Django Channels , which aims to bring asynchronous support to Django .","text_count":131,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The project that the entire specification originates from is"},{"block_type":"element","tag_name":"a","attributes":{"href":"http://channels.readthedocs.io/"},"children":[{"block_type":"text","content":"Django Channels"}]},{"block_type":"text","content":", which aims to"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.sitepoint.com/premium/books/django-channels-for-real-time-updates"},"children":[{"block_type":"text","content":"bring asynchronous support to Django"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n39742","search_text":"The implementations recommended by the Django docs include Daphne , which is a reference implementation of the spec written on top of Twisted , an event-based, lower-level server or engine, and Uvicorn , an ASGI web server that supports WebSockets, includes Gunicorn worker class, and is wsgi-compatible.","text_count":304,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The implementations recommended by the Django docs include"},{"block_type":"element","tag_name":"a","attributes":{"href":"http://github.com/django/daphne"},"children":[{"block_type":"text","content":"Daphne"}]},{"block_type":"text","content":", which is a reference implementation of the spec written on top of"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://twistedmatrix.com/trac/"},"children":[{"block_type":"text","content":"Twisted"}]},{"block_type":"text","content":", an event-based, lower-level server or engine, and"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.uvicorn.org/"},"children":[{"block_type":"text","content":"Uvicorn"}]},{"block_type":"text","content":", an ASGI web server that supports WebSockets, includes Gunicorn worker class, and is wsgi-compatible."}]},{"block_type":"element","block":"k5n39743","search_text":"According to some benchmarks, Uvicorn is faster even than Node.js , but for a real benchmark, we would have to have very similar, almost identical applications to compare on top of Uvicorn and Node.","text_count":198,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"According to some benchmarks, Uvicorn is faster even than"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.techempower.com/benchmarks/#section=data-r15&amp;hw=ph&amp;test=json&amp;l=hr9urj&amp;c=3"},"children":[{"block_type":"text","content":"Node.js"}]},{"block_type":"text","content":", but for a real benchmark, we would have to have very similar, almost identical applications to compare on top of Uvicorn and Node."}]},{"block_type":"element","block":"k5n39744","search_text":"Deployment: Some Method to the Madness","text_count":38,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Deployment: Some Method to the Madness"}]},{"block_type":"element","block":"k5n39745","search_text":"Heroku, one of the main PaaS cloud vendors today, started in 2007 mainly as a platform for Ruby applications. By 2010, when it was acquired by Salesforce , Heroku supported most modern server-side languages.","text_count":207,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Heroku, one of the main PaaS cloud vendors today, started in 2007 mainly as a platform for Ruby applications. By 2010, when it was"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://techcrunch.com/2010/12/08/breaking-salesforce-buys-heroku-for-212-million-in-cash/"},"children":[{"block_type":"text","content":"acquired by Salesforce"}]},{"block_type":"text","content":", Heroku supported most modern server-side languages."}]},{"block_type":"element","block":"k5n39746","search_text":"Its developers, led by Adam Wiggins, came up with a methodology framework for server applications deployment in 2011 that addresses many, if not most, deployment problems.","text_count":171,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Its developers, led by Adam Wiggins, came up with a methodology framework for server applications deployment in 2011 that addresses many, if not most, deployment problems."}]},{"block_type":"element","block":"k5n39747","search_text":"It's now available as an online and EPUB book and can be read for free. Many developers have found these twelve considerations very useful, so we'll mention them here and later discuss Django deployment in light of them.","text_count":220,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"It's now available as an"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://12factor.net/"},"children":[{"block_type":"text","content":"online and EPUB book"}]},{"block_type":"text","content":"and can be read for free. Many developers have found these twelve considerations very useful, so we'll mention them here and later discuss Django deployment in light of them."}]},{"block_type":"element","block":"k5n39748","search_text":"The rules, paraphrased, are as follows:","text_count":39,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The rules, paraphrased, are as follows:"}]},{"block_type":"element","block":"k5n39749","search_text":"There should exist a single codebase, tracked by a source-control system like Git, for many different deployments, such as development, staging, and production. Dependencies should be explicit. Even implicit reliance on system tools like cURL should be avoided. App configuration that differs from one deployment environment to the other needs to be separate from the deployed code (not stored as hard-coded constants). Services such as databases, queueing systems, and email of caching systems, are treated as swappable resources that can be replaced, depending on the deployment environment, without code changes. All the data needed should be in the configuration. There are three stages to deploying an app to production: build , release , and run . The build stage prepares the codebase to be executed. It fetches the dependencies, compiles static assets, and so on. The release stage takes the build and combines it with the deployment configuration so that it can be executed in the target environment. The run stage launches the app into execution, so that app is live and running . According to this framework, there is-or should be-a clear separation between these three stages of deployment. Releases have their unique identifiable IDs. All changes to the codebase or configuration should mean that there's a new release . The app is executed as one or more processes that are stateless: data doesn't rely on memory of the process or disk cache for any longer time. Processes share nothing and data is outsourced to outside services like a database. Port binding means that the web server can be decoupled from the application, and the application is self-contained: it lives at a certain port receiving requests. Concurrency and assigning different types of tasks to different processes is required. Also, the ability to scale our application horizontally via stateless processes. Since these processes should not be daemonized or written to PID files, there will need to be a process manager such as supervisord or systemd , each having their own advantages. Disposable processes means that processes can be shut down or started fast, and that graceful shutdowns guarantee that already started requests/tasks will finish while the app will stop creating new processes. Parity between development and production greatly reduces complexity of deployments. Best practices mean reducing the time gap between development and production (small and frequent deployments), reducing the personnel gap (the same people developing the application are closely involved in deploying it in production) and reducing the tooling gap-by keeping the software stack similar between development and production environments. This keeps the complexities and possible issues resulting from different stacks between development and production at a minimum. Logs should be treated as event streams, and consuming them should be left out of the application itself (sometimes sent to a specialized piece of software for more detailed and useful analysis). Administrative tasks and management processes should be run in the deployment environment. Admin code should be part of deployed code. ","text_count":3177,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"There should exist a single codebase, tracked by a source-control system like Git, for many different deployments, such as development, staging, and production."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Dependencies should be explicit. Even implicit reliance on system tools like cURL should be avoided."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"App configuration that differs from one deployment environment to the other needs to be separate from the deployed code (not stored as hard-coded constants)."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Services such as databases, queueing systems, and email of caching systems, are treated as swappable resources that can be replaced, depending on the deployment environment, without code changes. All the data needed should be in the configuration."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"There are three stages to deploying an app to production:"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"build"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"release"}]},{"block_type":"text","content":", and"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"run"}]},{"block_type":"text","content":"."}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"build"}]},{"block_type":"text","content":"stage prepares the codebase to be executed. It fetches the dependencies, compiles static assets, and so on."}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"release"}]},{"block_type":"text","content":"stage takes the build and combines it with the deployment configuration so that it can be executed in the target environment."}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"run"}]},{"block_type":"text","content":"stage launches the app into execution, so that app is"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"live"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"running"}]},{"block_type":"text","content":"."}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"According to this framework, there is-or should be-a clear separation between these three stages of deployment. Releases have their unique identifiable IDs. All changes to the codebase or configuration should mean that there's a new"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"release"}]},{"block_type":"text","content":"."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The app is executed as one or more processes that are stateless: data doesn't rely on memory of the process or disk cache for any longer time. Processes share nothing and data is outsourced to outside services like a database."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Port binding means that the web server can be decoupled from the application, and the application is self-contained: it lives at a certain port receiving requests."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Concurrency and assigning different types of tasks to different processes is required. Also, the ability to scale our application horizontally via stateless processes."}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Since these processes should not be daemonized or written to PID files, there will need to be a process manager such as"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://askubuntu.com/questions/938781/which-to-use-systemd-or-supervisor"},"children":[{"block_type":"text","content":"supervisord or systemd"}]},{"block_type":"text","content":", each having their own advantages."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Disposable processes means that processes can be shut down or started fast, and that graceful shutdowns guarantee that already started requests/tasks will finish while the app will stop creating new processes."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Parity between development and production greatly reduces complexity of deployments. Best practices mean reducing the time gap between development and production (small and frequent deployments), reducing the personnel gap (the same people developing the application are closely involved in deploying it in production) and reducing the tooling gap-by keeping the software stack similar between development and production environments. This keeps the complexities and possible issues resulting from different stacks between development and production at a minimum."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Logs should be treated as event streams, and consuming them should be left out of the application itself (sometimes sent to a specialized piece of software for more detailed and useful analysis)."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Administrative tasks and management processes should be run in the deployment environment. Admin code should be part of deployed code."}]}]}]},{"block_type":"element","block":"k5n3974a","search_text":"These principles should be taken as guidelines, not hard rules, because they are there to make the lives of developers, DevOps engineers and administrators easier.","text_count":163,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"These principles should be taken as guidelines, not hard rules, because they are there to make the lives of developers, DevOps engineers and administrators easier."}]},{"block_type":"element","block":"k5n3974b","search_text":"How does Django stack up against these demands, and how can we apply these when deploying our apps?","text_count":99,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"How does Django stack up against these demands, and how can we apply these when deploying our apps?"}]},{"block_type":"element","block":"k5n3974c","search_text":"Regarding the first rule, which says that we should have a single, version-control-tracked codebase for multiple deployment environments, Django settings are, by default, in the settings.py file-meaning that we would need to change this file for deployment to each environment. We would be deploying different code to each environment, and our deployment flow wouldn't be as smooth.","text_count":382,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Regarding the first rule, which says that we should have a single, version-control-tracked codebase for multiple deployment environments, Django settings are, by default, in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":"file-meaning that we would need to change this file for deployment to each environment. We would be deploying different code to each environment, and our deployment flow wouldn't be as smooth."}]},{"block_type":"element","block":"k5n3974d","search_text":"WSGI is the standard with Python web apps, including Django. This means that when we start our project, the subfolder that contains our base app (the one with the name of our project, which we here named xyz_app ) will have a wsgi.py file:","text_count":239,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"WSGI is"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"the"}]},{"block_type":"text","content":"standard with Python web apps, including Django. This means that when we start our project, the subfolder that contains our base app (the one with the name of our project, which we here named"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"xyz_app"}]},{"block_type":"text","content":") will have a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"wsgi.py"}]},{"block_type":"text","content":"file:"}]},{"block_type":"element","block":"k5n3974e","search_text":"\"\"\"WSGI config for xyz_app project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'xyz_app.settings') application = get_wsgi_application() ","text_count":384,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"\"\"\"WSGI config for xyz_app project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'xyz_app.settings')\n\napplication = get_wsgi_application()"}]}]},{"block_type":"element","block":"k5n3974f","search_text":"One environment variable here comes to our rescue: DJANGO_SETTINGS_MODULE . We could change the filename and path to our settings.py file here and make it custom.","text_count":162,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"One environment variable here comes to our rescue:"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"DJANGO_SETTINGS_MODULE"}]},{"block_type":"text","content":". We could change the filename and path to our"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":"file here and make it custom."}]},{"block_type":"element","block":"k5n3974g","search_text":"However, this still wouldn't be the cleanest solution. Maybe it would be nicer to have a conditional loading of different files, depending on the environment. Multitple developers working on a single repo also present a challenge here.","text_count":235,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"However, this still wouldn't be the cleanest solution. Maybe it would be nicer to have a conditional loading of different files, depending on the environment. Multitple developers working on a single repo also present a challenge here."}]},{"block_type":"element","block":"k5n3974h","search_text":"Another way to solve this is, after all the other settings in settings.py , to override the default environment by importing all the variables from a user and/or deployment-specific settings file. If such file doesn't exist, we simply pass .","text_count":241,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Another way to solve this is, after all the other settings in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":", to override the default environment by importing all the variables from a user and/or deployment-specific settings file. If such file doesn't exist, we simply"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"pass"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3974i","search_text":"One Django package that tries to provide us with a comprehensive control over the different settings files is django-split-settings . It enables us to organize our settings over multiple files and directories. This blog post covers this solution for multiple environments in more details.","text_count":288,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"One Django package that tries to provide us with a comprehensive control over the different settings files is"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://django-split-settings.readthedocs.io/en/latest/"},"children":[{"block_type":"text","content":"django-split-settings"}]},{"block_type":"text","content":". It enables us to organize our settings over multiple files and directories."},{"block_type":"element","tag_name":"a","attributes":{"href":"https://dev.to/wemake-services/managing-djangos-settings-37ao"},"children":[{"block_type":"text","content":"This blog post"}]},{"block_type":"text","content":"covers this solution for multiple environments in more details."}]},{"block_type":"element","block":"k5n3974j","search_text":"The second rule says that dependencies need to be specified explicitly. In order to achieve this, we will freeze our Python packages and modules environment by executing in our project root:","text_count":190,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The second rule says that dependencies need to be specified explicitly. In order to achieve this, we will"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"freeze"}]},{"block_type":"text","content":"our Python packages and modules environment by executing in our project root:"}]},{"block_type":"element","block":"k5n3974k","search_text":"pip freeze > requirements.txt ","text_count":30,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"pip freeze > requirements.txt"}]}]},{"block_type":"element","block":"k5n3974l","search_text":"This will output all the specific Python packages we're using locally, so we can reproduce the same dependencies on other servers.","text_count":130,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This will output all the specific Python packages we're using locally, so we can reproduce the same dependencies on other servers."}]},{"block_type":"element","block":"k5n3974m","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/requirements.png","alt":"","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k5n3974n","search_text":"Then we'll be able to install the same set of packages on another system by executing the following:","text_count":100,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Then we'll be able to install the same set of packages on another system by executing the following:"}]},{"block_type":"element","block":"k5n3974o","search_text":"pip install -r requirements.txt ","text_count":32,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"pip install -r requirements.txt"}]}]},{"block_type":"element","block":"k5n3974p","search_text":"If we have different package requirements for different deployment environments-which will be the case-we'll create multiple requirements files, one for each environment, which will make it possible for us to distribute the same code as part of a single repository, and different developers will be able to reproduce the same Python execution environment locally. We can have a directory with separate requirements files to install in each environment:","text_count":452,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If we have different package requirements for different deployment environments-which will be the case-we'll create multiple requirements files, one for each environment, which will make it possible for us to distribute the same code as part of a single repository, and different developers will be able to reproduce the same Python execution environment locally. We can have a directory with separate requirements files to install in each environment:"}]},{"block_type":"element","block":"k5n3974q","search_text":"--requirements |-development.txt |-staging.txt |-production.txt ","text_count":64,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"--requirements\n  |-development.txt\n  |-staging.txt\n  |-production.txt"}]}]},{"block_type":"element","block":"k5n3974r","search_text":"The third rule deals with configuration, which should be a part of the environment and not the code. This way there's strict separation of configuration and the code.","text_count":166,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The third rule deals with configuration, which should be a part of the environment and not the code. This way there's strict separation of configuration and the code."}]},{"block_type":"element","block":"k5n3974s","search_text":"To follow this guideline, we can use django-environ , a package that makes it easy to deal with settings and environment variables for different deployment environments. With it, we create different .env files, which we populate with different environment variables. These files are excluded from version control by adding them to .gitignore , and once included in our settings, we can access different environment variables in the environ variable.","text_count":449,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"To follow this guideline, we can use"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://django-environ.readthedocs.io/en/latest/"},"children":[{"block_type":"text","content":"django-environ"}]},{"block_type":"text","content":", a package that makes it easy to deal with settings and environment variables for different deployment environments. With it, we create different"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":".env"}]},{"block_type":"text","content":"files, which we populate with different environment variables. These files are excluded from version control by adding them to"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":".gitignore"}]},{"block_type":"text","content":", and once included in our settings, we can access different environment variables in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"environ"}]},{"block_type":"text","content":"variable."}]},{"block_type":"element","block":"k5n3974t","search_text":"Beside the django-environ docs , we can read more about advantages and caveats of implementing this package here .","text_count":114,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Beside the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://django-environ.readthedocs.io/en/latest/"},"children":[{"block_type":"text","content":"django-environ docs"}]},{"block_type":"text","content":", we can read more about advantages and caveats of implementing this package"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://djangostars.com/blog/configuring-django-settings-best-practices/"},"children":[{"block_type":"text","content":"here"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3974u","search_text":"The fourth rule suggests that outside resources like databases should be swappable without changes in the code. With Django, an Object-relational Mapper abstraction layer takes care of this. The only changes we need to make to swap SQlite for PostgreSQL are configuration or environment variables.","text_count":297,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The fourth rule suggests that outside resources like databases should be swappable without changes in the code. With Django, an"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.djangoproject.com/en/3.0/topics/db/"},"children":[{"block_type":"text","content":"Object-relational Mapper"}]},{"block_type":"text","content":"abstraction layer takes care of this. The only changes we need to make to swap SQlite for PostgreSQL are configuration or environment variables."}]},{"block_type":"element","block":"k5n3974v","search_text":"This is why it's a good idea to use Django ORM syntax for our queries and not SQL: we won't need to make changes to our code if we swap database engines.","text_count":153,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This is why it's a good idea to use Django ORM syntax for our queries and not SQL: we won't need to make changes to our code if we swap database engines."}]},{"block_type":"element","block":"k5n3974w","search_text":"If we talk about queuing services, the Django Celery library provides swappable broker back ends, which can be Redis, RabbitMQ or others.","text_count":137,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If we talk about queuing services, the Django Celery library provides swappable broker back ends, which can be Redis, RabbitMQ or others."}]},{"block_type":"element","block":"k5n3974x","search_text":"The build, release and run stages from the fifth principle won't be as clearly cut, since with Python we don't have so clear a build phase. Python is an interpreted language, and we need to have a unique ID for every release. This may be more clear when we use Docker, as we'll discuss later.","text_count":292,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The build, release and run stages from the fifth principle won't be as clearly cut, since with Python we don't have so clear a"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"build"}]},{"block_type":"text","content":"phase. Python is an interpreted language, and we need to have a unique ID for every release. This may be more clear when we use Docker, as we'll discuss later."}]},{"block_type":"element","block":"k5n3974y","search_text":"The sixth rule is about stateless processes that don't share any data. Django largely adheres to this principle. Data is kept in database, and even the cache can be configured to rely on outside processes/services between requests.","text_count":231,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The sixth rule is about stateless processes that don't share any data. Django largely adheres to this principle. Data is kept in database, and even the cache can be configured to rely on outside processes/services between requests."}]},{"block_type":"element","block":"k5n3974z","search_text":"The seventh rule about the port binding demands that our application can be consumed on a certain port and that it can be decoupled from the web server. Services that make our app should, in this way, be contained.","text_count":214,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The seventh rule about the port binding demands that our application can be consumed on a certain port and that it can be decoupled from the web server. Services that make our app should, in this way, be contained."}]},{"block_type":"element","block":"k5n39750","search_text":"We spoke about the proxy_pass and uwsgi_pass directives in our NGINX server configuration. Our WSGI apps will usually serve requests on some non-standard port (or Unix socket) on localhost, and NGINX will run as a reverse proxy.","text_count":228,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We spoke about the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"proxy_pass"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"uwsgi_pass"}]},{"block_type":"text","content":"directives in our NGINX server configuration. Our WSGI apps will usually serve requests on some non-standard port (or Unix socket) on localhost, and NGINX will run as a reverse proxy."}]},{"block_type":"element","block":"k5n39751","search_text":"This means that we can easily swap NGINX for some other server that will do the same. This is possible with the mod_wsgi or uwsgi server, because the application stays decoupled from the web server, while this couldn't be achieved with mod_python (the now deprecated Apache module that was used in the past for Django deployments), as the module actually embeds the Python interpreter into the web server process.","text_count":413,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This means that we can easily swap NGINX for some other server that will do the same. This is possible with the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"mod_wsgi"}]},{"block_type":"text","content":"or uwsgi server, because the application stays decoupled from the web server, while this couldn't be achieved with"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"mod_python"}]},{"block_type":"text","content":"(the now deprecated Apache module that was used in the past for Django deployments), as the module actually embeds the Python interpreter into the web server process."}]},{"block_type":"element","block":"k5n39752","search_text":"The eighth rule is about concurrency and horizontally scalable services. If we've followed guidelines four, six and seven, it's relatively simple to horizontally scale our web app, because it's modular, and its front-end web server can easily be configured for another back end, another IP or physical machine.","text_count":310,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The eighth rule is about concurrency and horizontally scalable services. If we've followed guidelines four, six and seven, it's relatively simple to horizontally scale our web app, because it's modular, and its front-end web server can easily be configured for another back end, another IP or physical machine."}]},{"block_type":"element","block":"k5n39753","search_text":"The simplest NGINX setup for load balancing, handling three different back ends, can be set up with a simple configuration that looks something like this (from the NGINX docs):","text_count":176,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The simplest NGINX setup for load balancing, handling three different back ends, can be set up with a simple configuration that looks something like this (from the NGINX docs):"}]},{"block_type":"element","block":"k5n39754","search_text":"http { upstream myapp1 { server srv1.example.com; server srv2.example.com; server srv3.example.com; } server { listen 80; location / { proxy_pass http://myapp1; } } } ","text_count":167,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"http {\n    upstream myapp1 {\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://myapp1;\n        }\n    }\n}"}]}]},{"block_type":"element","block":"k5n39755","search_text":"srv1 , srv2 and srv3 can be normal NGINX and uWSGI setups, or it can be servers configured to run directly just with uWSGI.","text_count":123,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"srv1"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"srv2"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"srv3"}]},{"block_type":"text","content":"can be normal NGINX and uWSGI setups, or it can be servers configured to run directly just with uWSGI."}]},{"block_type":"element","block":"k5n39756","search_text":"The ninth rule (or guideline) suggests that our processes can be spun up quickly, and gracefully shut down, without disrupting the application. One side of this relies on our web server setup. And if we use NGINX and an app server like uWSGI, the NGINX configuration will be responsible for juggling incoming web requests and passing them on to the Python app.","text_count":360,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The ninth rule (or guideline) suggests that our processes can be spun up quickly, and gracefully shut down, without disrupting the application. One side of this relies on our web server setup. And if we use NGINX and an app server like uWSGI, the NGINX configuration will be responsible for juggling incoming web requests and passing them on to the Python app."}]},{"block_type":"element","block":"k5n39757","search_text":"Regarding the database writes, they are also atomic, and Django provides database transaction management with the ATOMIC_REQUESTS setting in the DATABASES block in settings.py . When set to true, Django will make sure that there are no conflicts if multiple requests attempt to write to the database, and that unsuccessful writes revert all changes and shut down gracefully.","text_count":374,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Regarding the database writes, they are also atomic, and Django provides database transaction management with the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"ATOMIC_REQUESTS"}]},{"block_type":"text","content":"setting in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"DATABASES"}]},{"block_type":"text","content":"block in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":". When set to true, Django will make sure that there are no conflicts if multiple requests attempt to write to the database, and that unsuccessful writes revert all changes and shut down gracefully."}]},{"block_type":"element","block":"k5n39758","search_text":"The development/production parity demands that there are minimal differences between deployment environments. Developers sometimes keep different databases, and we've already covered how to separate variables in settings.py files by environments.","text_count":246,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The development/production parity demands that there are minimal differences between deployment environments. Developers sometimes keep different databases, and we've already covered how to separate variables in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":"files by environments."}]},{"block_type":"element","block":"k5n39759","search_text":"Django projects usually make use of the logging module from Python's Standard Library and route the output to a file.","text_count":117,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Django projects usually make use of the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.python.org/3/library/logging.html"},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"logging"}]},{"block_type":"text","content":"module from Python's Standard Library"}]},{"block_type":"text","content":"and route the output to a file."}]},{"block_type":"element","block":"k5n3975a","search_text":"The twelfth rule, demanding that administrative/management tasks be run in the deployment environment, can be satisfied by default simply by the fact that Django's manage.py facility is available in every Django project and is part of the code.","text_count":244,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The twelfth rule, demanding that administrative/management tasks be run in the deployment environment, can be satisfied by default simply by the fact that Django's"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"manage.py"}]},{"block_type":"text","content":"facility is available in every Django project and is part of the code."}]},{"block_type":"element","block":"k5n3975b","search_text":"The Checklist","text_count":13,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"The Checklist"}]},{"block_type":"element","block":"k5n3975c","search_text":"Django docs provide us with a list of deployment points we need to go through, settings variables and administrative tasks to run. The command python manage.py check --deploy in our project root will output a list of things we need to adjust to make our Django app production ready. Some of the settings we will need to change are:","text_count":331,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Django docs provide us with a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/"},"children":[{"block_type":"text","content":"list of deployment points"}]},{"block_type":"text","content":"we need to go through, settings variables and administrative tasks to run. The command"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"python manage.py check --deploy"}]},{"block_type":"text","content":"in our project root will output a list of things we need to adjust to make our Django app production ready. Some of the settings we will need to change are:"}]},{"block_type":"element","block":"k5n3975d","search_text":"DEBUG = True : this has to be changed in settings.py for security reasons. We don't want all the details of our Django installation to be publicly available. DATABASES : this setting will usually need to be changed, if for no other reason that that by default, Django enables the SQLite database, and in production we'll probably want to use PostgreSQL. EMAIL_BACKEND , MEDIA_ROOT and STATIC_ROOT will need to be changed. We will want to run django-admin collectstatic to copy our static files to a directory, from which they'll be served in production by a web server. ","text_count":570,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"DEBUG = True"}]},{"block_type":"text","content":": this has to be changed in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"settings.py"}]},{"block_type":"text","content":"for security reasons. We don't want all the details of our Django installation to be publicly available."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"DATABASES"}]},{"block_type":"text","content":": this setting will usually need to be changed, if for no other reason that that by default, Django enables the SQLite database, and in production we'll probably want to use PostgreSQL."}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"EMAIL_BACKEND"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"MEDIA_ROOT"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"STATIC_ROOT"}]},{"block_type":"text","content":"will need to be changed. We will want to run"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"django-admin collectstatic"}]},{"block_type":"text","content":"to copy our static files to a directory, from which they'll be served in production by a web server."}]}]}]},{"block_type":"element","block":"k5n3975e","search_text":"One of the valuable steps in preparing our app for deployment will be to make sure that our templates can be compiled/cached, because doing so on every request would inflict a significant performance impact. We'll add django.template.loaders.cached.Loader to our loaders list:","text_count":276,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"One of the valuable steps in preparing our app for deployment will be to make sure that our templates can be compiled/cached, because doing so on every request would inflict a significant performance impact. We'll add"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"django.template.loaders.cached.Loader"}]},{"block_type":"text","content":"to our loaders list:"}]},{"block_type":"element","block":"k5n3975f","search_text":"TEMPLATES = [{ 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'OPTIONS': { 'loaders': [ ('django.template.loaders.cached.Loader', [ 'django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader', 'path.to.custom.Loader', ]), ], }, }] ","text_count":327,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"TEMPLATES = [{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'DIRS': [os.path.join(BASE_DIR, 'templates')],\n    'OPTIONS': {\n        'loaders': [\n            ('django.template.loaders.cached.Loader', [\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n                'path.to.custom.Loader',\n            ]),\n        ],\n    },\n}]"}]}]},{"block_type":"element","block":"k5n3975g","search_text":"We recommend readers go through the official deployment checklist .","text_count":67,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We recommend readers go through the official"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/"},"children":[{"block_type":"text","content":"deployment checklist"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3975h","search_text":"Deployment Tools","text_count":16,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Deployment Tools"}]},{"block_type":"element","block":"k5n3975i","search_text":"Docker","text_count":6,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Docker"}]},{"block_type":"element","block":"k5n3975j","search_text":"We already wrote about packaging Django applications with Docker. Here we'll just remind the readers of the main principles and benefits we can get from Docker.","text_count":160,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We already wrote about packaging Django applications with Docker. Here we'll just remind the readers of the main principles and benefits we can get from Docker."}]},{"block_type":"element","block":"k5n3975k","search_text":"One of the main Docker philosophies is \"one service, one container\". This is why, ideally, we'll have at minimum one database container, one webserver container (like NGINX) and one web app container with a WSGI application (uWSGI + app). This will enable us to satisfy many of the twelve rules and to decouple our app and make it modular. It will make it easy to explicitly specify our dependencies, environments and to distribute them and create atomic builds.","text_count":462,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"One of the main Docker philosophies is \"one service, one container\". This is why, ideally, we'll have at minimum one database container, one webserver container (like NGINX) and one web app container with a WSGI application (uWSGI + app). This will enable us to satisfy many of the twelve rules and to decouple our app and make it modular. It will make it easy to explicitly specify our dependencies, environments and to distribute them and create atomic builds."}]},{"block_type":"element","block":"k5n3975l","search_text":"A uWSGI container configured to listen at a certain port will make it possible to scale our app to any number of machines, with a front-facing NGINX load balancer.","text_count":163,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"A uWSGI container configured to listen at a certain port will make it possible to scale our app to any number of machines, with a front-facing NGINX load balancer."}]},{"block_type":"element","block":"k5n3975m","search_text":"Docker-compose enables us to specify system-wide environment variables for every container.","text_count":91,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Docker-compose enables us to specify system-wide environment variables for every container."}]},{"block_type":"element","block":"k5n3975n","search_text":"Fabric","text_count":6,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Fabric"}]},{"block_type":"element","block":"k5n3975o","search_text":"We mentioned Mina, a Ruby gem from the Ruby ecosystem that we can use to deploy Django apps. A similar tool, only written in Python, and therefore more idiomatic for deploying Django apps, is Fabric . It connects to one or more remote hosts via SSH and executes shell commands there. The current version we should use is fabric2, while we need fabric1 (just fabric ) if our app uses the unsupported Python 2.","text_count":408,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We mentioned Mina, a Ruby gem from the Ruby ecosystem that we can use to deploy Django apps. A similar tool, only written in Python, and therefore more idiomatic for deploying Django apps, is"},{"block_type":"element","tag_name":"a","attributes":{"href":"http://www.fabfile.org/"},"children":[{"block_type":"text","content":"Fabric"}]},{"block_type":"text","content":". It connects to one or more remote hosts via SSH and executes shell commands there. The current version we should use is fabric2, while we need fabric1 (just"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"fabric"}]},{"block_type":"text","content":") if our app uses the unsupported Python 2."}]},{"block_type":"element","block":"k5n3975p","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/install-fabric.gif","alt":"","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k5n3975q","search_text":"This installation will leave us with a command fab2 , and Fabric will expect a fabfile.py file in the same directory with defined tasks.","text_count":136,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This installation will leave us with a command"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"fab2"}]},{"block_type":"text","content":", and Fabric will expect a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"fabfile.py"}]},{"block_type":"text","content":"file in the same directory with defined tasks."}]},{"block_type":"element","block":"k5n3975r","search_text":"Fabfile is where we define environment variables that we need for deployment, where we define our separate environments and define tasks to be performed in each of them.","text_count":169,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Fabfile"}]},{"block_type":"text","content":"is where we define environment variables that we need for deployment, where we define our separate environments and define tasks to be performed in each of them."}]},{"block_type":"element","block":"k5n3975s","search_text":"The entire, detailed deployment flow for each of the scenarios we mentioned so far is out of the scope of this guide, but we're giving here a very simple example of what our fabfile might look like. This is merely an introduction to fabfile structure and syntax, and not a complete fabric deployment guide.","text_count":306,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The entire, detailed deployment flow for each of the scenarios we mentioned so far is out of the scope of this guide, but we're giving here a very simple example of what our fabfile might look like. This is merely an introduction to fabfile structure and syntax, and not a complete fabric deployment guide."}]},{"block_type":"element","block":"k5n3975t","search_text":"import sys from fabric2 import Connection, task from invoke import Responder from fabric2.config import Config PROJECT_NAME = \"djangoXYZ\" PROJECT_PATH = \"~/testfabric\" REPO_URL = \"https://github.com/tyaakow/roots.git\" def get_connection(ctx): try: with Connection(ctx.host, ctx.user, connect_kwargs=ctx.connect_kwargs) as conn: return conn except Exception as e: return None # here we are defining different deployment environments # with different variables - from a custom SSH key file to # different host IPs (obviously the `ctx.host` IP addresses will need # to be replaced with real IPs) @task def development(ctx): ctx.user = \"root\" ctx.host = \"95.***.***.81\" ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\" @task def staging(ctx): ctx.user = \"root\" ctx.host = \"95.***.***.82\" ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\" @task def production(ctx): ctx.user = \"root\" ctx.host = \"95.***.***.83\" ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\" # check if file exists def exists(file, dir): return file in dir # git tasks @task def pull(ctx, branch=\"master\"): # check if ctx is Connection object or Context object # if Connection object then calling method from program # else calling directly from terminal if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) with conn.cd(PROJECT_PATH): conn.run(\"git pull origin {}\".format(branch)) @task def checkout(ctx, branch=None): if branch is None: sys.exit(\"branch name is not specified\") print(\"branch-name: {}\".format(branch)) if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) with conn.cd(PROJECT_PATH): conn.run(\"git checkout {branch}\".format(branch=branch)) @task def clone(ctx): if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) ls_result = conn.run(\"ls\").stdout ls_result = ls_result.split(\"\\n\") if exists(PROJECT_NAME, ls_result): print(\"that project is already cloned\") return conn.run(\"git clone {} {}\".format(REPO_URL, PROJECT_NAME)) @task def migrate(ctx): if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) with conn.cd(PROJECT_PATH): conn.run(\"python manage.py migrate\") # supervisor tasks. Supervisor is a capable process manager # that will come especially handy if we use # queuing systems such as Celery @task def start(ctx): if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) conn.sudo(\"supervisorctl start all\") @task def restart(ctx): if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) print(\"restarting supervisor...\") conn.sudo(\"supervisorctl restart all\") @task def stop(ctx): if isinstance(ctx, Connection): conn = ctx else: conn = get_connection(ctx) conn.sudo(\"supervisorctl stop all\") # deploy task @task def deploy(ctx): conn = get_connection(ctx) if conn is None: sys.exit(\"No connection\") clone(conn) with conn.cd(PROJECT_PATH): print(\"checking out the dev branch...\") checkout(conn, branch=\"dev\") print(\"pulling the code from github dev branch...\") pull(conn) print(\"executing migrations...\") migrate(conn) print(\"restarting the supervisor...\") restart(conn) ","text_count":3121,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"import sys\nfrom fabric2 import Connection, task\nfrom invoke import Responder\nfrom fabric2.config import Config\n\nPROJECT_NAME = \"djangoXYZ\"\nPROJECT_PATH = \"~/testfabric\"\nREPO_URL = \"https://github.com/tyaakow/roots.git\"\n\ndef get_connection(ctx):\n    try:\n        with Connection(ctx.host, ctx.user, connect_kwargs=ctx.connect_kwargs) as conn:\n            return conn\n    except Exception as e:\n        return None\n\n\n# here we are defining different deployment environments\n# with different variables - from a custom SSH key file to\n# different host IPs (obviously the `ctx.host` IP addresses will need\n# to be replaced with real IPs)\n\n@task\ndef development(ctx):\n    ctx.user = \"root\"\n    ctx.host = \"95.***.***.81\"\n    ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\"\n\n@task\ndef staging(ctx):\n    ctx.user = \"root\"\n    ctx.host = \"95.***.***.82\"\n    ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\"\n\n@task\ndef production(ctx):\n    ctx.user = \"root\"\n    ctx.host = \"95.***.***.83\"\n    ctx.connect_kwargs.key_filename = \"/home/t/.ssh/id_rsa_2\"\n\n# check if file exists\ndef exists(file, dir):\n    return file in dir\n\n\n# git tasks\n@task\ndef pull(ctx, branch=\"master\"):\n    # check if ctx is Connection object or Context object\n    # if Connection object then calling method from program\n    # else calling directly from terminal\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n\n    with conn.cd(PROJECT_PATH):\n        conn.run(\"git pull origin {}\".format(branch))\n\n\n@task\ndef checkout(ctx, branch=None):\n    if branch is None:\n        sys.exit(\"branch name is not specified\")\n    print(\"branch-name: {}\".format(branch))\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n    with conn.cd(PROJECT_PATH):\n        conn.run(\"git checkout {branch}\".format(branch=branch))\n\n\n@task\ndef clone(ctx):\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n\n    ls_result = conn.run(\"ls\").stdout\n    ls_result = ls_result.split(\"\\n\")\n    if exists(PROJECT_NAME, ls_result):\n        print(\"that project is already cloned\")\n        return\n    conn.run(\"git clone {} {}\".format(REPO_URL, PROJECT_NAME))\n\n@task\ndef migrate(ctx):\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n    with conn.cd(PROJECT_PATH):\n        conn.run(\"python manage.py migrate\")\n\n\n# supervisor tasks. Supervisor is a capable process manager\n# that will come especially handy if we use\n# queuing systems such as Celery\n\n@task\ndef start(ctx):\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n    conn.sudo(\"supervisorctl start all\")\n\n\n@task\ndef restart(ctx):\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n    print(\"restarting supervisor...\")\n    conn.sudo(\"supervisorctl restart all\")\n\n@task\ndef stop(ctx):\n    if isinstance(ctx, Connection):\n        conn = ctx\n    else:\n        conn = get_connection(ctx)\n    conn.sudo(\"supervisorctl stop all\")\n\n\n# deploy task\n@task\ndef deploy(ctx):\n    conn = get_connection(ctx)\n    if conn is None:\n        sys.exit(\"No connection\")\n    clone(conn)\n    with conn.cd(PROJECT_PATH):\n        print(\"checking out the dev branch...\")\n        checkout(conn, branch=\"dev\")\n        print(\"pulling the code from github dev branch...\")\n        pull(conn)\n        print(\"executing migrations...\")\n        migrate(conn)\n        print(\"restarting the supervisor...\")\n        restart(conn)"}]}]},{"block_type":"element","block":"k5n3975u","search_text":"When we save this file in our project root, locally, we'll be able to run tasks like fab2 development pull or fab2 production deploy .","text_count":134,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"When we save this file in our project root, locally, we'll be able to run tasks like"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"fab2 development pull"}]},{"block_type":"text","content":"or"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"fab2 production deploy"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3975v","search_text":"For complete documentation, see the Fabric website .","text_count":52,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"For complete documentation, see the"},{"block_type":"element","tag_name":"a","attributes":{"href":"http://docs.fabfile.org/en/2.5/getting-started.html"},"children":[{"block_type":"text","content":"Fabric website"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n3975w","search_text":"Another tool that we need to mention when discussing Django deployment is Ansible . Ansible is an open-source configuration management tool and automation tool/platform by Red Hat. It's mostly used in bigger deployment environments, with multiple machines that need to be orchestrated. It uses the YAML format for programming its tasks, so it's accessible without a steep learning path. Its YAML playbook files are human-readable.","text_count":430,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Another tool that we need to mention when discussing Django deployment is"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.ansible.com/"},"children":[{"block_type":"text","content":"Ansible"}]},{"block_type":"text","content":". Ansible is an open-source configuration management tool and automation tool/platform by Red Hat. It's mostly used in bigger deployment environments, with multiple machines that need to be orchestrated. It uses the YAML format for programming its tasks, so it's accessible without a steep learning path. Its YAML playbook files are human-readable."}]},{"block_type":"element","block":"k5n3975x","search_text":"It uses the SSH protocol to provision and set up servers, which don't need any agent software installed. Ansible pushes \"modules\" via SSH to the client machines, which act as small programs.","text_count":190,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"It uses the SSH protocol to provision and set up servers, which don't need any agent software installed. Ansible pushes \"modules\" via SSH to the client machines, which act as small programs."}]},{"block_type":"element","block":"k5n3975y","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/deploying-a-django-app/images/ansible-playbook.png","alt":"","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k5n3975z","search_text":"Ansible can be used for orchestrating multiple servers, setting them up, managing their configuration and automate processes. Ansible can be used with Fabric to automate setup and deployment of hosts of servers. By itself it provides richer semantics, and it may take a bit more time to get to know all it provides.","text_count":315,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Ansible can be used for orchestrating multiple servers, setting them up, managing their configuration and automate processes. Ansible can be used with Fabric to automate setup and deployment of hosts of servers. By itself it provides richer semantics, and it may take a bit more time to get to know all it provides."}]},{"block_type":"element","block":"k5n39760","search_text":"To quote one DevOps professional , \"Ansible is generally much more powerful, since it provides much deeper and more complex semantics for modeling multi-tier infrastructure, such as those with arrays of web and database hosts.\"","text_count":227,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"To"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://insights.sei.cmu.edu/devops/2015/03/devops-technologies-fabric-or-ansible.html"},"children":[{"block_type":"text","content":"quote one DevOps professional"}]},{"block_type":"text","content":", \"Ansible is generally much more powerful, since it provides much deeper and more complex semantics for modeling multi-tier infrastructure, such as those with arrays of web and database hosts.\""}]},{"block_type":"element","block":"k5n39761","search_text":"One example of an Ansible-Django playbook can be found here .","text_count":61,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"One example of an Ansible-Django playbook can be found"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/cchurch/ansible-role-django"},"children":[{"block_type":"text","content":"here"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n39762","search_text":"There are also other tools that can help us streamline our deployment. Django-Cookiecutter is a package that helps us make our projects production ready. WhiteNoise helps with the serving of static files. And there ares many others .","text_count":233,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"There are also other tools that can help us streamline our deployment."},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/pydanny/cookiecutter-django"},"children":[{"block_type":"text","content":"Django-Cookiecutter"}]},{"block_type":"text","content":"is a package that helps us make our projects production ready."},{"block_type":"element","tag_name":"a","attributes":{"href":"http://whitenoise.evans.io/en/stable/"},"children":[{"block_type":"text","content":"WhiteNoise"}]},{"block_type":"text","content":"helps with the serving of static files. And there ares"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://djangopackages.org/grids/g/deployment/"},"children":[{"block_type":"text","content":"many others"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k5n39763","search_text":"Conclusion","text_count":10,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Conclusion"}]},{"block_type":"element","block":"k5n39764","search_text":"In this guide we went over the main concerns of the deployment of Django apps, but the topic we tried to cover is rather big, and so it would be impossible to cover comprehensively. From speed optimization to security hardening, there are many other topics worth exploring once you've covered the basics.","text_count":304,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In this guide we went over the main concerns of the deployment of Django apps, but the topic we tried to cover is rather big, and so it would be impossible to cover comprehensively. From speed optimization to security hardening, there are many other topics worth exploring once you've covered the basics."}]},{"block_type":"element","block":"k5n39765","search_text":"","text_count":0,"tag_name":"script","attributes":{"src":"https://cdn.rawgit.com/alexmwalker/book-template/master/src/docs/assets/js/book.js"},"children":[]},{"block_type":"element","block":"k5n39766","search_text":"","text_count":0,"tag_name":"script","attributes":{"src":"assets/js/prism.js"},"children":[]}]}]}